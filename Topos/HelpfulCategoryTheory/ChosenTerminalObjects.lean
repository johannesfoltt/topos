import Mathlib.CategoryTheory.Limits.Shapes.IsTerminal
import Mathlib.CategoryTheory.Monoidal.Cartesian.Basic

open CategoryTheory Category Limits MonoidalCategory

namespace CategoryTheory.Limits

universe u v

--variable (C : Type u) [Category.{v} C]

class ChosenTerminalObject (C : Type u) [Category.{v} C] where
  /-- An explicit choice for the terminal object-/
  top : C
  /-- The chosen object is a terminal object-/
  isTerminal : IsTerminal top

class ChosenInitialObject (C : Type u) [Category.{v} C] where
  /-- An explicit choice for the terminal object-/
  bot : C
  /-- The chosen object is a terminal object-/
  isInitial : IsInitial bot


variable {C : Type u} [Category.{v} C]

notation "‚ä§_" => ChosenTerminalObject.top

notation "‚ä•_" => ChosenInitialObject.bot

namespace ChosenTerminalObject

variable [ChosenTerminalObject C]

/-- The map from an object to the terminal object. -/
def from_ (X : C) : X ‚ü∂ ‚ä§_ :=
  isTerminal.from X

lemma hom_ext {X : C} (f g : X ‚ü∂ ‚ä§_) : f = g := isTerminal.hom_ext f g

@[simp]
theorem comp_from {X Y : C} (f : X ‚ü∂ Y) : f ‚â´ from_ Y = from_ X :=
  hom_ext _ _

@[simp]
theorem from_self : from_ (‚ä§_ : C) = ùüô (‚ä§_ : C) :=
  hom_ext _ _

instance isSplitMono_from {X : C} (f : ‚ä§_ ‚ü∂ X) : IsSplitMono f :=
  isTerminal.isSplitMono_from _

end ChosenTerminalObject

namespace ChosenInitialObject

variable [ChosenInitialObject C]

/-- The map to an object from the initial object. -/
def to_ [ChosenInitialObject C] (X : C) : ‚ä•_ ‚ü∂ X :=
  isInitial.to X

lemma hom_ext {X : C} (f g : ‚ä•_ ‚ü∂ X) : f = g :=
  isInitial.hom_ext f g

@[simp]
theorem comp_to {X Y : C} (f : X ‚ü∂ Y) : to_ X ‚â´ f = to_ Y :=
  hom_ext _ _

@[simp]
theorem to_self : to_ (‚ä•_ : C) = ùüô (‚ä•_ : C) :=
  hom_ext _ _

instance isSplitEpi_to {X : C} (f : X ‚ü∂ ‚ä•_) : IsSplitEpi f :=
  isInitial.isSplitEpi_to _
